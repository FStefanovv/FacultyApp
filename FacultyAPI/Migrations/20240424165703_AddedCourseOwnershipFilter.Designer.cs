// <auto-generated />
using System;
using FacultyApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FacultyApp.Migrations
{
    [DbContext(typeof(StudentsDbContext))]
    [Migration("20240424165703_AddedCourseOwnershipFilter")]
    partial class AddedCourseOwnershipFilter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FacultyApp.Model.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "6fa22881-a88e-4916-b9b3-f91f850a3f06",
                            Department = "Computer Science",
                            Name = "Introduction to Programming",
                            TeacherId = "1",
                            Year = 1
                        },
                        new
                        {
                            Id = "5e8f2466-c523-4a04-8a4c-9c6b8b2b0a18",
                            Department = "Computer Science",
                            Name = "Data Structures and Algorithms",
                            TeacherId = "1",
                            Year = 2
                        },
                        new
                        {
                            Id = "ed72c2d1-28b9-4c11-872e-b58abb05a20d",
                            Department = "Databases",
                            Name = "Database Management Systems",
                            TeacherId = "2",
                            Year = 3
                        });
                });

            modelBuilder.Entity("FacultyApp.Model.Examination", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("FacultyApp.Model.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EnrolledIn")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("GPA")
                        .HasColumnType("real");

                    b.Property<bool>("Graduated")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "61ea6414-7bae-4485-819f-5a232b386f01",
                            CurrentYear = 3,
                            DateOfBirth = new DateTime(1995, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alicesmith@gmail.com",
                            EnrolledIn = 2021L,
                            FirstName = "Alice",
                            GPA = 8.5f,
                            Graduated = false,
                            LastName = "Smith",
                            Password = "D7BEEAF7D6E5067747D6E412887DDDE01BB7A7784273C459B208A9899BE9C377584A9FA4767748A00A103E6D2942EB4BC6533BCA9804D833F2BD074BC4B0A9AD"
                        },
                        new
                        {
                            Id = "095bf885-2554-47e0-a91f-edc89969d6df",
                            CurrentYear = 4,
                            DateOfBirth = new DateTime(1998, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bobjohnson@gmail.com",
                            EnrolledIn = 2020L,
                            FirstName = "Bob",
                            GPA = 9.2f,
                            Graduated = false,
                            LastName = "Johnson",
                            Password = "D7BEEAF7D6E5067747D6E412887DDDE01BB7A7784273C459B208A9899BE9C377584A9FA4767748A00A103E6D2942EB4BC6533BCA9804D833F2BD074BC4B0A9AD"
                        });
                });

            modelBuilder.Entity("FacultyApp.Model.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EmployedIn")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DateOfBirth = new DateTime(1978, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Computer Science",
                            Email = "johndoe@gmail.com",
                            EmployedIn = 2010L,
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "D7BEEAF7D6E5067747D6E412887DDDE01BB7A7784273C459B208A9899BE9C377584A9FA4767748A00A103E6D2942EB4BC6533BCA9804D833F2BD074BC4B0A9AD"
                        },
                        new
                        {
                            Id = "2",
                            DateOfBirth = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Databases",
                            Email = "janedoe@gmail.com",
                            EmployedIn = 2012L,
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "D7BEEAF7D6E5067747D6E412887DDDE01BB7A7784273C459B208A9899BE9C377584A9FA4767748A00A103E6D2942EB4BC6533BCA9804D833F2BD074BC4B0A9AD"
                        });
                });

            modelBuilder.Entity("FacultyApp.Model.Course", b =>
                {
                    b.HasOne("FacultyApp.Model.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FacultyApp.Model.Examination", b =>
                {
                    b.HasOne("FacultyApp.Model.Course", "Course")
                        .WithMany("Examinations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultyApp.Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FacultyApp.Model.Course", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("FacultyApp.Model.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
